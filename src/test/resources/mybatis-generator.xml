<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE generatorConfiguration
        PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"
        "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd">

<!-- 配置生成器 -->
<generatorConfiguration>
    <!-- 可以用于加载配置项或者配置文件，在整个配置文件中就可以使用${propertyKey}的方式来引用配置项 resource：配置资源加载地址，使用resource，MBG从classpath开始找，比如com/myproject/generatorConfig.properties
        url：配置资源加载地质，使用URL的方式，比如file:///C:/myfolder/generatorConfig.properties. 注意，两个属性只能选址一个; -->
    <!-- 另外，如果使用了mybatis-generator-maven-plugin，那么在pom.xml中定义的properties都可以直接在generatorConfig.xml中使用 -->
    <properties resource="mysql.properties"/>
    <!--<properties resource="oracle.properties" />-->

    <context id="myContext" targetRuntime="MyBatis3" defaultModelType="flat">
        <!-- 这里要注意配置顺序 -->
        <!-- property* -->
        <!-- plugin* -->
        <!-- commentGenerator? -->
        <!-- (connectionFactory|jdbcConnection) -->
        <!-- javaTypeResolver? -->
        <!-- javaModelGenerator -->
        <!-- sqlMapGenerator? -->
        <!-- javaClientGenerator? -->
        <!-- table+ -->

        <property name="javaFileEncoding" value="UTF-8"/>
        <!-- 如果你想使用模板来定制生成的java文件和xml文件的样式，你可以通过指定这两个属性的值来实现 -->
        <!-- <property name="javaFormatter" value="org.mybatis.generator.api.dom.DefaultJavaFormatter"/> -->
        <!-- <property name="xmlFormatter" value="org.mybatis.generator.api.dom.DefaultXmlFormatter"/> -->

        <!-- 由于beginningDelimiter和endingDelimiter的默认值为双引号(")
            指明数据库的用于标记数据库对象名的符号，比如ORACLE就是双引号，MYSQL默认是`反引号 -->
        <property name="beginningDelimiter" value="${delimiter}"/>
        <property name="endingDelimiter" value="${delimiter}"/>

        <!-- 自定义物理分页 可生成支持Mysql数据的limit 不支持Oracle -->
        <!-- 生成一个新的selectByExample方法，这个方法可以接收offset和limit参数，主要用来实现分页 -->
        <!--<plugin type="cn.tisson.mybatis.generator.plugins.page.MySQLPaginationPlugin"/>-->
        <plugin type="${pagination.plugin}"/>

        <!-- 自定义插件：自定义查询指定字段 -->
        <plugin type="cn.tisson.mybatis.generator.plugins.field.MyQueryFieldsPlugin"/>

        <!--&lt;!&ndash; 自定义插件：此处是将UserMapper.xml改名为UserDao.xml &ndash;&gt;
        <plugin type="cn.tisson.mybatis.generator.plugins.rename.RenameXmlMapperFileNamePlugin">
            <property name="searchString" value="Mapper"/>
            <property name="replaceString" value="Dao"/>
        </plugin>

        &lt;!&ndash; 自定义插件：此处是将UserMapper改名为UserDao &ndash;&gt;
        <plugin type="cn.tisson.mybatis.generator.plugins.rename.RenameJavaMapperTypePlugin">
            <property name="searchString" value="Mapper$"/>
            <property name="replaceString" value="Dao"/>
        </plugin>

        &lt;!&ndash; 自带插件：此处是将UserExample改名为UserQuery &ndash;&gt;
        <plugin type="org.mybatis.generator.plugins.RenameExampleClassPlugin">
            <property name="searchString" value="Example$"/>
            <property name="replaceString" value="Query"/>
        </plugin>-->

        <!-- 自带插件：JavaBean 实现 序列化 接口 -->
        <plugin type="org.mybatis.generator.plugins.SerializablePlugin"/>
        <!-- 为生成的Java模型类添加序列化接口，并生成serialVersionUID字段 -->
        <!-- <plugin type="cn.tisson.mybatis.generator.plugins.MySerializablePlugin">
            <property name="suppressJavaInterface" value="false"/>
        </plugin> -->

        <!-- 自带插件：开启支持内存分页 可生成 支持内存分布的方法及参数 -->
        <!-- <plugin type="org.mybatis.generator.plugins.RowBoundsPlugin" /> -->

        <!-- 自带插件：generate entity时，生成hashcode和equals方法 -->
        <plugin type="org.mybatis.generator.plugins.EqualsHashCodePlugin"/>

        <!-- 自定义插件：genenater entity时，生成toString -->
        <plugin type="cn.tisson.mybatis.generator.plugins.MyToStringPlugin">
            <!-- 是否打印super类的toString -->
            <!-- <property name="useToStringFromRoot" value="true"/> -->
        </plugin>

        <!-- 自定义插件：这个注释插件，Oracle数据库无效，MySQL有效 -->
        <commentGenerator type="cn.tisson.mybatis.generator.plugins.MyCommentGenerator">
            <!-- 是否去除自动生成的注释：true-是，false-否 -->
            <property name="suppressAllComments" value="false"/>
            <property name="addRemarkComments" value="true"/>
        </commentGenerator>
        <!-- <commentGenerator> <property name="suppressAllComments" value="false"
            /> </commentGenerator> -->

        <!--数据库连接的信息：驱动类、连接地址、用户名、密码 -->
        <jdbcConnection driverClass="${driverClass}"
                        connectionURL="${connectionURL}" userId="${userId}" password="${password}">
        </jdbcConnection>

        <!-- java类型处理器
                用于处理DB中的类型到Java中的类型，默认使用JavaTypeResolverDefaultImpl；
                注意一点，默认会先尝试使用Integer，Long，Short等来对应DECIMAL和 NUMERIC数据类型；
        -->
        <javaTypeResolver>
            <!--
                true：使用BigDecimal对应DECIMAL和 NUMERIC数据类型
                false：默认,
                    scale>0;length>18：使用BigDecimal;
                    scale=0;length[10,18]：使用Long；
                    scale=0;length[5,9]：使用Integer；
                    scale=0;length<5：使用Short；
             -->
            <property name="forceBigDecimals" value="false"/>
        </javaTypeResolver>

        <!-- 生成 POJO 类和 Example 类的位置 -->
        <javaModelGenerator targetPackage="${package.pojo}"
                            targetProject="${target.project}\src\main\java">
            <!-- 自动为每一个生成空参构造函数，和一个带所有field的构造函数。默认：false -->
            <property name="constructorBased" value="true"/>
            <!-- 在targetPackage的基础上，根据数据库的schema再生成一层package，最终生成的类放在这个package下，默认：false -->
            <!-- <property name="enableSubPackages" value="false" /> -->
            <!-- 创建一个不可变的类，如果为true，没有setter方法。默认：false -->
            <!-- <property name="immutable" value="false" /> -->
            <!-- 是否在setter中对String类型字段进行trim操作。默认：false -->
            <!-- <property name="trimStrings" value="false" /> -->
        </javaModelGenerator>

        <!-- mapper.xml 映射文件生成的位置 -->
        <sqlMapGenerator targetPackage="${package.pojo}"
                         targetProject="${target.project}\src\main\resources">
            <property name="enableSubPackages" value="false"/>
        </sqlMapGenerator>

        <!-- mapper 类生成的位置 -->
        <javaClientGenerator type="XMLMAPPER" targetPackage="${package.mapper}"
                             targetProject="${target.project}\src\main\java">
            <property name="enableSubPackages" value="false"/>
        </javaClientGenerator>

        <!-- 指定数据库表 -->
        <!-- 可选配置： -->
        <!-- 1：schema：数据库的schema -->
        <!-- 2：catalog：数据库的catalog -->
        <!-- 3：alias：为数据表设置的别名，如果设置了alias，那么生成的所有的SELECT SQL语句中，列名会变成：alias_actualColumnName -->
        <!-- 4：domainObjectName：生成的domain类的名字，如果不设置，直接使用表名作为domain类的名字；可以设置为somepck.domainName，那么会自动把domainName类再放到somepck包里面 -->
        <!-- 5：enableInsert（默认true）：指定是否生成insert语句 -->
        <!-- 6：enableSelectByPrimaryKey（默认true）：指定是否生成按照主键查询对象的语句（就是getById或get） -->
        <!-- 7：enableSelectByExample（默认true）：MyBatis3Simple为false，指定是否生成动态查询语句 -->
        <!-- 8：enableUpdateByPrimaryKey（默认true）：指定是否生成按照主键修改对象的语句（即update) -->
        <!-- 9：enableDeleteByPrimaryKey（默认true）：指定是否生成按照主键删除对象的语句（即delete） -->
        <!-- 10：enableDeleteByExample（默认true）：MyBatis3Simple为false，指定是否生成动态删除语句 -->
        <!-- 11：enableCountByExample（默认true）：MyBatis3Simple为false，指定是否生成动态查询总条数语句（用于分页的总条数查询） -->
        <!-- 12：enableUpdateByExample（默认true）：MyBatis3Simple为false，指定是否生成动态修改语句（只修改对象中不为空的属性） -->
        <!-- 13：modelType：参考context元素的defaultModelType，相当于覆盖 -->
        <!-- 14：delimitIdentifiers：参考tableName的解释，注意，默认的delimitIdentifiers是双引号，如果类似MYSQL这样的数据库，使用的是`（反引号，那么还需要设置context的beginningDelimiter和endingDelimiter属性） -->
        <!-- 15：delimitAllColumns：设置是否所有生成的SQL中的列名都使用标识符引起来。默认为false，delimitIdentifiers参考context的属性 -->
        <!-- <table schema="" tableName="IM_WX_DATACUBE_ARTICLE_SUMMARY"> -->
        <!-- 参考 javaModelGenerator 的 constructorBased属性 -->
        <!-- <property name="constructorBased" value="false" /> -->

        <!-- 默认为false，如果设置为true，在生成的SQL中，table名字不会加上catalog或schema -->
        <!-- <property name="ignoreQualifiersAtRuntime" value="false" /> -->

        <!-- 参考 javaModelGenerator 的 immutable 属性 -->
        <!-- <property name="immutable" value="false" /> -->

        <!-- 指定是否只生成domain类，如果设置为true，只生成domain类，如果还配置了sqlMapGenerator，那么在mapper
            XML文件中，只生成resultMap元素 -->
        <!-- <property name="modelOnly" value="false" /> -->

        <!-- 如果设置了runtimeSchema，那么在生成的SQL中，使用该指定的schema，而不是table元素上的schema -->
        <!-- <property name="runtimeSchema" value=""/> -->

        <!-- 如果设置了runtimeTableName，那么在生成的SQL中，使用该指定的tablename，而不是table元素上的tablename -->
        <!-- <property name="runtimeTableName" value=""/> -->

        <!-- 注意，该属性只针对MyBatis3Simple有用； 如果选择的runtime是MyBatis3Simple，那么会生成一个SelectAll方法，如果指定了selectAllOrderByClause，那么会在该SQL中添加指定的这个order条件； -->
        <!-- <property name="selectAllOrderByClause" value="age desc,username
            asc" /> -->

        <!-- 如果设置为true，生成的model类会直接使用column本身的名字，而不会再使用驼峰命名方法，比如BORN_DATE，生成的属性名字就是BORN_DATE,而不会是bornDate -->
        <!-- <property name="useActualColumnNames" value="false" /> -->

        <!-- 该元素会在根据表中列名计算对象属性名之前先重命名列名，非常适合用于表中的列都有公用的前缀字符串的时候， 比如列名为：CUST_ID,CUST_NAME,CUST_EMAIL,CUST_ADDRESS等；
            那么就可以设置searchString为"^CUST_"，并使用空白替换，那么生成的Customer对象中的属性名称就不是 custId,custName等，而是先被替换为ID,NAME,EMAIL,然后变成属性：id，name，email；
            注意，MBG是使用java.util.regex.Matcher.replaceAll来替换searchString和replaceString的，
            如果使用了columnOverride元素，该属性无效； -->
        <!-- <columnRenamingRule searchString="" replaceString=""/> -->
        <!-- </table> -->
        <table tableName="upms_log" domainObjectName="UpmsLog"/>
        <table tableName="upms_system" domainObjectName="UpmsSystem"/>
    </context>
</generatorConfiguration>
